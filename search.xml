<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>11.14~11.21 学习日志</title>
    <url>/2022/11/21/11.14~11.21%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%BF%97/</url>
    <content><![CDATA[<p>11.14<br>学习DFS，BFS以及它们的Implementation<br>参考Algorithm(4th)补充Graph章节的笔记</p>
<p>11.15<br>学习最短路径(Shortest Path)、最小生成树</p>
<p>11.16<br>继续学习最短路径、最小生成树<br>学习Prim、Dijkstra算法(Implementation on Algorithm(4th))<br>学习动态规划(Dynamic Programming)</p>
<p>11.17<br>继续学习动态规划<br>CS61B进入新章节排序，学习完初级排序算法，包括选择排序、插入排序、归并排序、堆排序</p>
<p>11.18<br>学习快速排序</p>
<p>11.19<br>More quick sort, stability, shuffling, Sorting and algorithmic Bounds<br>Radix sorts</p>
<p>11.20<br>整理排序部分笔记，写编程日志<br>Project2 Phase1整理</p>
]]></content>
      <categories>
        <category>LearningLog</category>
      </categories>
      <tags>
        <tag>Log</tag>
      </tags>
  </entry>
  <entry>
    <title>Project2：CS61BYoG Phase1 地图生成项目个人记录</title>
    <url>/2022/11/21/CS61B%20Project2%20Phase1/</url>
    <content><![CDATA[<h3 id="项目背景"><a href="#项目背景" class="headerlink" title="项目背景"></a>项目背景</h3><p>本项目Project 2: CS61BYoG是伯克利2018年CS61B Data Structure的作业项目之一，具体的项目介绍可以参考<a href="https://sp18.datastructur.es/materials/proj/proj2/proj2">这里</a>。</p>
<hr>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>正如我在博客的「关于我」里写到的那样，本项目对我而言称得上意义非凡。我从最开始的迷茫惶恐，完全不知道如何下手，到逐渐体会到写代码「发现问题」「解决问题」的乐趣，并最终历时1周+完成了本项目的Phase1。</p>
<p>可以说，这个Project2真正让我入门CS，完成1次Project期间的思考、纠错过程的成长胜过10次学习新课。我对CS61B、主课的Josh Hug老师以及所有为本课作业项目付出努力的其他老师们只有深深的敬意与感谢。</p>
<p>本文章也主要是对这个项目完成的记录，思路以及实现都很基础简单，泛用性更广的方法放在了下一篇文章迷宫三大算法里（一周内应该能写出来）</p>
<hr>
<span id="more"></span>


<h3 id="项目要求"><a href="#项目要求" class="headerlink" title="项目要求"></a>项目要求</h3><p>本项目的Phase1要求生成一个包含房间与走廊的随机世界，并且：</p>
<ol>
<li>世界必须为2D Grid，且伪随机生成(Seed相同生成的世界也是相同的)</li>
<li>生成的世界包含随机数量的房间(形状任意，本文生成矩形房间)和走廊, 它们的宽度、高度、位置都应该是随机的，走廊还应包括可以转弯的走廊。</li>
<li>房间和走廊的墙壁必须在视觉上与地板不同。</li>
<li>房间和走廊应该相连，彼此之间不存在空隙。</li>
</ol>
<p>另外本项目的世界要求使用给出的Tile Engine进行渲染生成，详细的使用方法在<a href="https://sp18.datastructur.es/materials/lab/lab5/lab5">Lab5</a>里已有介绍，伪随机也在Lab5里给出了相关例子供学习，这里不多赘述了。</p>
<h3 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h3><p>写代码之前，先分析一下项目要求我们做什么。<br>我们可以简单的抽象为以下几步：</p>
<ul>
<li>生成一个世界</li>
<li>随机生成房间</li>
<li>随机生成走廊</li>
<li>将房间和走廊连通</li>
</ul>
<p>根据生成房间和走廊的方式以及连接方式不同可以产生好几种思路，不过具体的代码实现主要是在细节有所差异，主流思路基本这里介绍两种，可以作为参考。</p>
<p><em>思路1：首先随机生成房间，在房间内部随机选取一点作为门，将门的x坐标存入数组中排序，并将相邻的两个门之间打通走廊（由于门是随机开的，走廊也随机）</em></p>
<p><em>思路2：随机生成房间，使用迷宫算法(这里推荐Prim Algorithm, DFS也可以)在房间周围生成迷宫，再将不需要的墙清除。</em></p>
<p>本人是在完成Project2的中途才学习了三大迷宫生成算法，因此并没有在本项目里使用，采用第一种较为简单易实现的思路。</p>
<h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p>思路有了，接下来在动手写代码前先思考：需要哪些Class分别用来生成什么，需要哪些Instance Variable分别储存什么数据，需要哪些Method分别用来实现什么功能。</p>
<p>这里分享一下我的整体框架</p>
<ul>
<li><code>Room</code>：随机生成房间</li>
<li><code>Hallway</code>：随机生成走廊</li>
<li><code>DoorPosition</code>：存放房间内门的属性</li>
<li><code>MapGenerator</code>: 用于最后生成地图<ul>
<li><code>public static final int WIDTH</code>;</li>
<li><code>public static final int HEIGHT</code>;</li>
<li><code>public static int TIMES</code>;</li>
<li><code>public static ArrayList&lt;Room&gt; Rooms</code>;</li>
<li><code>public static ArrayList&lt;Door&gt; Doors</code>;</li>
<li><code>private long Seed</code>;</li>
<li><code>public static  Random random</code>;</li>
</ul>
</li>
</ul>
<h3 id="详细代码"><a href="#详细代码" class="headerlink" title="详细代码"></a>详细代码</h3><ol>
<li>随机生成房间</li>
</ol>
<p>这一步相对来说比较简单，随机生成房间的位置、长度、高度然后将房间的周围铺上Tileset.WALL, 房间内铺上Tileset.FLOOR就算完成。注意在生成的过程中需要考虑：1. 房间是否整个在地图范围内。2. 房间之间是否有重叠</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Room</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> xPos;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> yPos;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> width;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> height;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Room</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> w, <span class="type">int</span> h)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.xPos = x;</span><br><span class="line">        <span class="built_in">this</span>.yPos = y;</span><br><span class="line">        <span class="built_in">this</span>.width = w;</span><br><span class="line">        <span class="built_in">this</span>.height = h;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">generateRoom</span><span class="params">(TETile[][] World, <span class="type">long</span> seed)</span> &#123;</span><br><span class="line">        <span class="type">Random</span> <span class="variable">rand</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>(seed);</span><br><span class="line">        <span class="keyword">while</span> (MapGenerator.Rooms.size() &lt; MapGenerator.TIMES) &#123;</span><br><span class="line">            <span class="comment">// 这里房间的长度和高度保证最小为5更为美观，也可以设置3、4</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> rand.nextInt(MapGenerator.WIDTH);</span><br><span class="line">            <span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> rand.nextInt(MapGenerator.HEIGHT);</span><br><span class="line">            <span class="type">int</span> <span class="variable">width</span> <span class="operator">=</span> rand.nextInt(MapGenerator.WIDTH / <span class="number">5</span>) + <span class="number">5</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">height</span> <span class="operator">=</span> rand.nextInt(MapGenerator.HEIGHT / <span class="number">5</span>) + <span class="number">5</span>;</span><br><span class="line">            <span class="type">Room</span> <span class="variable">newRoom</span> <span class="operator">=</span> buildRoom(x, y, width, height);</span><br><span class="line">            <span class="keyword">if</span> ( RoomInMap(newRoom) &amp;&amp; !IsOverlapped(World, newRoom)) &#123;</span><br><span class="line">                MapGenerator.Rooms.add(newRoom);</span><br><span class="line">                renderRoom(World, newRoom);</span><br><span class="line">                OpenDoor(World, newRoom, seed);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        MapGenerator.Doors = OrderDoor(MapGenerator.Doors);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>生成房间时我这里主要创建了5个方法, 功能与实现分别如下:</p>
<p><em>buildRoomm、renderRoom：使用随机生成的数据生成房间并铺上地板和墙</em></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Room <span class="title function_">buildRoom</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> w, <span class="type">int</span> h)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Room</span>(x, y, w, h);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">renderRoom</span><span class="params">(TETile[][] World, Room r)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> r.xPos; i &lt;= r.xPos + r.width - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> r.yPos; j &lt;= r.yPos + r.height - <span class="number">1</span>; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (IsWall(r, i, j)) &#123;</span><br><span class="line">                World[i][j] = Tileset.WALL;</span><br><span class="line">            &#125;</span><br><span class="line">                World[i][j] = Tileset.FLOOR;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em>RoomInMap：检查房间是否在生成的地图内（即是否有超出范围的房间）</em><br><em>IsOverlapped：检查房间之间互相有没有重叠</em><br><em>IsWall：检查当前格子是否是墙</em></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">RoomInMap</span><span class="params">(Room r)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (r.xPos + r.width &lt; MapGenerator.WIDTH &amp;&amp; r.yPos + r.height &lt; MapGenerator.HEIGHT);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">IsOverlapped</span><span class="params">(TETile[][] World, Room r)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> r.xPos; i &lt;= r.xPos + r.width - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> r.yPos; j &lt;= r.yPos + r.height - <span class="number">1</span>; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (World[i][j] == Tileset.WALL || World[i][j] == Tileset.FLOOR) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">IsWall</span><span class="params">(Room r, <span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (i == r.xPos || i == r.xPos + r.width - <span class="number">1</span> || j == r.yPos || j == r.yPos + r.height - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>随机生成房间的效果如图所示：</p>
<p><img data-src="/images/Project2_Phase1/Room.png" alt="随机生成房间"></p>
<p>另外，</p>
<p>我的方法在生成房间时同时为生成走廊做了一些前期准备：</p>
<p><em>Opendoor: 在房间内随机选择一点作为”door”并将其加入名字为Doors的ArrayList中</em><br><em>OrderDoor：将所有的door按x坐标由小到大排序</em></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">OpenDoor</span><span class="params">(TETile[][] World, Room r, <span class="type">long</span> seed)</span> &#123;</span><br><span class="line">    <span class="type">Random</span> <span class="variable">rand</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>(seed);</span><br><span class="line">    <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> rand.nextInt(r.width - <span class="number">4</span>) + r.xPos + <span class="number">2</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> rand.nextInt(r.height - <span class="number">4</span>) + r.yPos + <span class="number">2</span>;</span><br><span class="line">    <span class="type">Door</span> <span class="variable">door</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Door</span>(x, y, r.xPos, r.yPos, r.width, r.height);</span><br><span class="line">    MapGenerator.Doors.add(door);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ArrayList&lt;Door&gt; <span class="title function_">OrderDoor</span> <span class="params">(ArrayList&lt;Door&gt; d)</span> &#123;</span><br><span class="line">    ArrayList&lt;Door&gt; newList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">while</span> (! d.isEmpty()) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">minOnes</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">minIndex</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; d.size(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (d.get(i).xPos &lt; minOnes) &#123;</span><br><span class="line">                minOnes = d.get(i).xPos;</span><br><span class="line">                minIndex = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        newList.add(d.remove(minIndex));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newList;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里需要一个类Door来存放开出来的door的具体属性，包括: x坐标、y坐标、对应房间的x坐标、y坐标、宽度、高度。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Door</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> xPos;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> yPos;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> xRoom;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> yRoom;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> width;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> height;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Door</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> xR, <span class="type">int</span> yR, <span class="type">int</span> w, <span class="type">int</span> h)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.xPos = x;  <span class="built_in">this</span>.yPos = y;  <span class="built_in">this</span>.xRoom = xR;    <span class="built_in">this</span>.yRoom = yR;    <span class="built_in">this</span>.width = w;     <span class="built_in">this</span>.height = h;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>生成房间并开出door的效果如图所示:<br><img data-src="/images/Project2_Phase1/Door.png" alt="生成门"></p>
<hr>
<ol start="2">
<li>随机生成走廊</li>
</ol>
<p>在生成房间的过程中我已经为生成走廊这一步做了一些准备。我生成走廊的思路大概就是在每一个房间里随机选择一点作为”door”，再将door按x坐标进行排序，分别连接相邻x坐标的两个房间的door就可以实现在房间之间生成走廊。而因为房间和door的选取都是随机的，故而走廊也可以做到随机生成。</p>
<p>生成走廊并铺设地砖也非常简单，我们应该尽量避免使用许多for循环把所有的代码压缩在一个方法里，而是要将问题分解整个过程可以拆分为生成垂直走廊、生成水平走廊、生成角落三个方法。</p>
<p>分别对应:<br><em>drawHorizonHallway</em><br><em>drawVerticalHallway</em><br><em>drawCorner</em></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hallway</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">generateHallway</span><span class="params">(TETile[][] World)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; MapGenerator.Doors.size()-<span class="number">1</span>; i++) &#123;</span><br><span class="line">            drawHorizonHallway(World, MapGenerator.Doors.get(i), MapGenerator.Doors.get(i+<span class="number">1</span>));</span><br><span class="line">            drawVerticalHallway(World, MapGenerator.Doors.get(i), MapGenerator.Doors.get(i+<span class="number">1</span>));</span><br><span class="line">            drawCorner(World, MapGenerator.Doors.get(i), MapGenerator.Doors.get(i+<span class="number">1</span>));</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>
<p>值得注意的是，在随机生成走廊的过程中同时也需要注意两个问题: 1. 走廊之间是否重叠。2. 走廊是否横穿房间（把墙建到了房间内部，实际上也就是走廊和房间是否重叠）</p>
<p>我的解决方法比较简单粗暴，那就是只在检测为TileSet.Nothing的地方才生成墙，不过这样也导致代码比较冗长（之后有时间优化一下）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">drawVerticalHallway</span><span class="params">(TETile[][] World, Door d1, Door d2)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (d1.yPos &gt; d2.yPos) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> d1.yPos-<span class="number">1</span>; i &gt;= d2.yPos; i--) &#123;</span><br><span class="line">                <span class="keyword">if</span> (World[d2.xPos - <span class="number">1</span>][i] == Tileset.NOTHING) &#123; World[d2.xPos - <span class="number">1</span>][i] = Tileset.WALL;&#125;</span><br><span class="line">                <span class="keyword">if</span> (World[d2.xPos + <span class="number">1</span>][i] == Tileset.NOTHING) &#123; World[d2.xPos + <span class="number">1</span>][i] = Tileset.WALL;&#125;</span><br><span class="line">                World[d2.xPos][i] = Tileset.FLOOR;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> d2.yPos; m &lt; d2.yRoom + d2.height - <span class="number">1</span>; m++) &#123;</span><br><span class="line">                World[d2.xPos - <span class="number">1</span>][m] = World[d2.xPos + <span class="number">1</span>][m] = Tileset.FLOOR;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> d2.yPos; j &gt;= d1.yPos + <span class="number">1</span>; j--) &#123;</span><br><span class="line">                <span class="keyword">if</span> (World[d2.xPos - <span class="number">1</span>][j] == Tileset.NOTHING) &#123; World[d2.xPos - <span class="number">1</span>][j] = Tileset.WALL;&#125;</span><br><span class="line">                <span class="keyword">if</span> (World[d2.xPos + <span class="number">1</span>][j] == Tileset.NOTHING) &#123; World[d2.xPos + <span class="number">1</span>][j] = Tileset.WALL;&#125;</span><br><span class="line">                World[d2.xPos][j] = Tileset.FLOOR;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">p</span> <span class="operator">=</span> d2.yPos; p &gt; d2.yRoom; p--) &#123;</span><br><span class="line">                World[d2.xPos - <span class="number">1</span>][p] = World[d2.xPos + <span class="number">1</span>][p] = Tileset.FLOOR;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">drawHorizonHallway</span><span class="params">(TETile[][] World, Door d1, Door d2)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> d1.xPos + <span class="number">1</span>; i &lt;= d2.xPos; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (World[i][d1.yPos + <span class="number">1</span>] == Tileset.NOTHING) &#123; World[i][d1.yPos + <span class="number">1</span>] = Tileset.WALL;&#125;</span><br><span class="line">            <span class="keyword">if</span> (World[i][d1.yPos - <span class="number">1</span>] == Tileset.NOTHING) &#123; World[i][d1.yPos - <span class="number">1</span>] = Tileset.WALL;&#125;</span><br><span class="line">                World[i][d1.yPos] = Tileset.FLOOR;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">p</span> <span class="operator">=</span> d1.xPos + <span class="number">1</span>; p &lt; d1.xRoom + d1.width -<span class="number">1</span>; p++) &#123;</span><br><span class="line">            World[p][d1.yPos - <span class="number">1</span>] = World[p][d1.yPos + <span class="number">1</span>] = Tileset.FLOOR;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">drawCorner</span><span class="params">(TETile[][] World, Door d1, Door d2)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (d1.yPos &lt; d2.yPos) &#123;</span><br><span class="line">            <span class="keyword">if</span> (World[d2.xPos][d1.yPos - <span class="number">1</span>] == Tileset.NOTHING) &#123; World[d2.xPos][d1.yPos - <span class="number">1</span>] = Tileset.WALL;&#125;</span><br><span class="line">            <span class="keyword">if</span> (World[d2.xPos + <span class="number">1</span>][d1.yPos] == Tileset.NOTHING) &#123; World[d2.xPos + <span class="number">1</span>][d1.yPos] = Tileset.WALL;&#125;</span><br><span class="line">            <span class="keyword">if</span> (World[d2.xPos + <span class="number">1</span>][d1.yPos - <span class="number">1</span>] == Tileset.NOTHING) &#123; World[d2.xPos + <span class="number">1</span>][d1.yPos - <span class="number">1</span>] = Tileset.WALL;&#125;</span><br><span class="line">            World[d2.xPos][d1.yPos] = Tileset.FLOOR;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (World[d2.xPos][d1.yPos + <span class="number">1</span>] == Tileset.NOTHING) &#123; World[d2.xPos][d1.yPos + <span class="number">1</span>] = Tileset.WALL;&#125;</span><br><span class="line">            <span class="keyword">if</span> (World[d2.xPos + <span class="number">1</span>][d1.yPos] == Tileset.NOTHING) &#123; World[d2.xPos + <span class="number">1</span>][d1.yPos] = Tileset.WALL;&#125;</span><br><span class="line">            <span class="keyword">if</span> (World[d2.xPos + <span class="number">1</span>][d1.yPos + <span class="number">1</span>] == Tileset.NOTHING) &#123;World[d2.xPos + <span class="number">1</span>][d1.yPos + <span class="number">1</span>] = Tileset.WALL;&#125;</span><br><span class="line">            World[d2.xPos][d1.yPos] = World[d2.xPos][d1.yPos - <span class="number">1</span>] = Tileset.FLOOR;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>优化方案:<br>这个代码显得冗长复杂主要有两个原因:</p>
<ul>
<li>需要判断d1.yPos和d2.yPos的大小关系，使用了If选择语句虽然直观但使得代码产生了大量重复。可以新增BiggerOne和SmallerOne两个变量然后使用他们进行铺墙铺地板操作。</li>
<li>三个方法我都简单粗暴的使用if检测是否为Tileset.Nothing，可以优化将其封装为一个方法，减少代码重复。</li>
</ul>
<hr>
<ol start="3">
<li>生成世界<br>最后就是生成世界，在Phase1里不用管太多，先自己设置好地图的宽WIDTH、高HEIGHT以及生成房间的个数TIMES，然后按Lab5例所示讲地图铺上Tileset.Nothing，最后分别生成房间和走廊就行了。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MapGenerator</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">WIDTH</span> <span class="operator">=</span> <span class="number">80</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">HEIGHT</span> <span class="operator">=</span> <span class="number">40</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">TIMES</span> <span class="operator">=</span> <span class="number">18</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ArrayList&lt;Room&gt; Rooms = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Room&gt;();</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ArrayList&lt;Door&gt; Doors = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Door&gt;();</span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> Seed;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span>  <span class="type">Random</span> <span class="variable">random</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> TETile[][] generate (<span class="type">long</span> seed) &#123;</span><br><span class="line">        TETile[][] Randomworld = <span class="keyword">new</span> <span class="title class_">TETile</span>[WIDTH][HEIGHT];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">0</span>; x &lt; WIDTH; x += <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> <span class="number">0</span>; y &lt; HEIGHT; y += <span class="number">1</span>) &#123;</span><br><span class="line">                Randomworld[x][y] = Tileset.NOTHING;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        Room.generateRoom(Randomworld, seed);</span><br><span class="line">        Hallway.generateHallway(Randomworld);</span><br><span class="line">        <span class="keyword">return</span> Randomworld;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<hr>
<ol start="4">
<li>Test</li>
</ol>
<p>随便写一个测试代码检验一下是否能生产迷宫，代码和最后的结果如下所示。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">TERenderer</span> <span class="variable">ter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TERenderer</span>();</span><br><span class="line">    ter.initialize(WIDTH,HEIGHT);</span><br><span class="line">    <span class="type">long</span> <span class="variable">seed</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">    TETile[][] teTiles = MapGenerator.generate(seed);</span><br><span class="line">    ter.renderFrame(teTiles);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img data-src="/images/Project2_Phase1/Door.png" alt="最后效果"></p>
<h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><p>怎么说呢，这个项目从我整理思路开始到最后完成花了接近10天的时间，期间思路更改过很多次，特别是在生成房间后如何生成走廊时，我考虑过好几种方法，还去学习了一些我不那么熟悉的Java知识，这些思路方法要么和我整个项目的思路有所冲突，要么实现起来太过于复杂，也违背了这个项目的本意。<br>回想起做这个项目的这两周，过程非常坎坷曲折，但最终还是做出了结果，在得到最后生成的地图时，很难能抑制住内心的激动与高兴。而那些看似走过的弯路：学习迷宫生成三大算法，学习重温Java知识以及过程中那些起初令人苦恼的思考过程，这些都让我受益匪浅。我以前没有做过什么项目，跟着老师的教学迷迷糊糊学到了这里，可以说这个Project才是我的原点。<br>最后的总结就是，那些看似困难的问题，看似复杂的项目，最终都需要我们脚踏实地一步一步去解决，把大问题分解成简单的小问题，而不要一味地陷入怕麻烦的心理，轻易去网上求助他人。<br>「敌人从一开始就不存在」，要战胜的只是唯有自己的畏缩不前的内心。<br><img data-src="/images/Project2_Phase1/Boki.jpg" alt="孤独摇滚"></p>
]]></content>
      <categories>
        <category>CS61B_Proj</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>CS61B</tag>
      </tags>
  </entry>
  <entry>
    <title>11.06~11.13 学习日志</title>
    <url>/2022/11/21/11.06~11.13%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%BF%97/</url>
    <content><![CDATA[<p>11.06<br>学习quadtree, k-dtree。<br>Project2_Phase1完成开门操作与generatehallway。</p>
<p>11.07<br>尝试了几种生成走廊的方法，均无法实现或过于复杂。卡在生成走廊的第一步，对门进行排序<br><em>想法1：findneighbours和randomlyneighbours，先寻找某个房间周围一定范围内的房间，然后将他们连接。</em><br>(放弃，过于复杂)<br><em>想法2：将每个房间的门储存进ArrayList中，直接按顺序生成相邻两个房间的走廊</em><br>(需要改进，因为这样生成的地图很乱，并且在生成走廊的过程中需要添加代码用于检测路径上是否已有走廊)<br><em>想法3：只将门的x坐标储存进ArrayList中，将x坐标从小到大排列，相邻两个房间直接生成走廊</em><br>(需要改进，在我代码的基础上，只储存x坐标没法后续生成走廊)<br><em>想法4：学习按Object属性对ArrayList进行排序</em></p>
<p>11.08<br>顺利解决排序问题，成功生成走廊。<br>最后学习伪随机数，给地图添加种子Seed。<br>Project2 Phase1所有功能全部实现，代码还有待优化。</p>
<p>11.09<br>学习Tree Traversal，摸了</p>
<p>11.10<br>完成Lab6，新了解并学习了StringBuilder<br>CS61B开始新章节Graph的学习<br>学习StdDraw</p>
<p>11.11<br>学习Tree Traversal</p>
<p>11.12<br>整理Project2的代码实现<br>摸了</p>
<p>11.13<br>学习Graph基础<br>学习DFS</p>
]]></content>
      <categories>
        <category>LearningLog</category>
      </categories>
      <tags>
        <tag>Log</tag>
      </tags>
  </entry>
</search>
